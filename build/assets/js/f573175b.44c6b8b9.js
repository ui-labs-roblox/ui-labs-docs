"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[74],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>b});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),u=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(i.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),d=a,b=p["".concat(i,".").concat(d)]||p[d]||m[d]||o;return n?r.createElement(b,l(l({ref:t},c),{},{components:n})):r.createElement(b,l({ref:t},c))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[p]="string"==typeof e?e:a,l[1]=s;for(var u=2;u<o;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>l});var r=n(7294),a=n(6010);const o={tabItem:"tabItem_Ymn6"};function l(e){let{children:t,hidden:n,className:l}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(o.tabItem,l),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>w});var r=n(7462),a=n(7294),o=n(6010),l=n(2466),s=n(6550),i=n(1980),u=n(7392),c=n(12);function p(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}function m(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function d(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function b(e){let{queryString:t=!1,groupId:n}=e;const r=(0,s.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,i._X)(o),(0,a.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(r.location.search);t.set(o,e),r.replace({...r.location,search:t.toString()})}),[o,r])]}function h(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,o=m(e),[l,s]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!d({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:o}))),[i,u]=b({queryString:n,groupId:r}),[p,h]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,o]=(0,c.Nk)(n);return[r,(0,a.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:r}),f=(()=>{const e=i??p;return d({value:e,tabValues:o})?e:null})();(0,a.useLayoutEffect)((()=>{f&&s(f)}),[f]);return{selectedValue:l,selectValue:(0,a.useCallback)((e=>{if(!d({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);s(e),u(e),h(e)}),[u,h,o]),tabValues:o}}var f=n(2389);const k={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function y(e){let{className:t,block:n,selectedValue:s,selectValue:i,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,l.o5)(),m=e=>{const t=e.currentTarget,n=c.indexOf(t),r=u[n].value;r!==s&&(p(t),i(r))},d=e=>{let t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:l}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,key:t,ref:e=>c.push(e),onKeyDown:d,onClick:m},l,{className:(0,o.Z)("tabs__item",k.tabItem,l?.className,{"tabs__item--active":s===t})}),n??t)})))}function v(e){let{lazy:t,children:n,selectedValue:r}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function g(e){const t=h(e);return a.createElement("div",{className:(0,o.Z)("tabs-container",k.tabList)},a.createElement(y,(0,r.Z)({},e,t)),a.createElement(v,(0,r.Z)({},e,t)))}function w(e){const t=(0,f.Z)();return a.createElement(g,(0,r.Z)({key:String(t)},e))}},14:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>b,frontMatter:()=>s,metadata:()=>u,toc:()=>p});var r=n(7462),a=(n(7294),n(3905)),o=n(4866),l=n(5162);const s={sidebar_position:3},i="Advanced Controls",u={unversionedId:"Controls/advanced",id:"Controls/advanced",title:"Advanced Controls",description:"Advanced controls are more advanced controls that allow you to add complex values to your stories, These controls are not available in Flipbook.",source:"@site/docs/Controls/advanced.mdx",sourceDirName:"Controls",slug:"/Controls/advanced",permalink:"/ui-labs-docs/docs/Controls/advanced",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Controls/advanced.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Primitive Controls",permalink:"/ui-labs-docs/docs/Controls/primitives"},next:{title:"Using Controls",permalink:"/ui-labs-docs/docs/Controls/using"}},c={},p=[{value:"Choose Control",id:"choose-control",level:2},{value:"EnumList Control",id:"enumlist-control",level:2},{value:"Slider Control",id:"slider-control",level:2},{value:"RGBA Control",id:"rgba-control",level:2},{value:"Example",id:"example",level:2}],m={toc:p},d="wrapper";function b(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"advanced-controls"},"Advanced Controls"),(0,a.kt)("p",null,"Advanced controls are more advanced controls that allow you to add complex values to your stories, These controls are not available in Flipbook."),(0,a.kt)("p",null,"They can only be created with constructor functions, let's see all the available advanced controls"),(0,a.kt)("h2",{id:"choose-control"},"Choose Control"),(0,a.kt)("p",null,"Choose control is a control that allows you to choose between a set of values, it gets displayed as a dropdown menu. This control takes an array of possible values"),(0,a.kt)("p",null,"The possible values can be any ",(0,a.kt)("a",{parentName:"p",href:"primitives"},"Primitive")," value (",(0,a.kt)("inlineCode",{parentName:"p"},"number, string, boolean, Color3"),") and you can mix types but this is not recommended."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"Choose(chooseList: Primitives[], defIndex?: number, widen?: boolean)\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Arguments:"),(0,a.kt)("ul",{parentName:"blockquote"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"chooseList"),":  Array of possible values"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"defIndex"),":  Default value index. If not given it will use the first value in the array"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"widen"),":  ",(0,a.kt)("em",{parentName:"li"},"Typescript only"),". If given the control type will be widened (explained later) "))),(0,a.kt)("h2",{id:"enumlist-control"},"EnumList Control"),(0,a.kt)("p",null,"EnumList control is similar to Choose, but this one takes a Dictionary instead of an array, working similar to Roblox Enums. The key names will be used to display a name of the value, this can be useful when the values alone dont give enough info.",(0,a.kt)("br",null),(0,a.kt)("br",null),"The values must also be any ",(0,a.kt)("a",{parentName:"p",href:"primitives"},"Primitive")," value. You can also mix types but this is again, not recommended."),(0,a.kt)("p",null,"A use example would be a control that takes a ",(0,a.kt)("inlineCode",{parentName:"p"},"Material")," value. The values are just numbers, so you can't know what they mean. With Enum control you can give each number a Material name."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"EnumList(enumList: {[key: string]: Primitives}, defKey: keyof enumList, widen?: boolean)\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Arguments:"),(0,a.kt)("ul",{parentName:"blockquote"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"enumList"),":  Dictionary of possible values and their names as keys"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"defKey"),":  Default value key. Because we cant use the first key of a dictionary, this is not optional"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"widen"),":  ",(0,a.kt)("em",{parentName:"li"},"Typescript only"),". If given the control type will be widened (explained later)"))),(0,a.kt)("br",null),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("mdxAdmonitionTitle",{parentName:"admonition"},"Widened Controls (",(0,a.kt)("em",{parentName:"mdxAdmonitionTitle"},"Typescript only"),")"),(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"Choose")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Enum")," controls accept a third parameter in typescript called ",(0,a.kt)("em",{parentName:"p"},"widen"),", this doesnt change anything on runtime, but if true is given the control value type will be the type of the values instead of the value literals"),(0,a.kt)("p",{parentName:"admonition"},"Example:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'   Choose(["One", "Two", "Three"], 0, false) // type: "One" | "Two" | "Three"\n   Choose(["One", "Two", "Three"], 0, true) // type: string\n\n   Choose([1, 2, 3], 0, false) // type: 1 | 2 | 3\n   Choose([1, 2, 3], 0, true) // type: number\n'))),(0,a.kt)("h2",{id:"slider-control"},"Slider Control"),(0,a.kt)("p",null,"Slider control is a control that allows you to use a number between a range, it gets displayed as a ",(0,a.kt)("strong",{parentName:"p"},"Slider")," with a number input, this control takes a ",(0,a.kt)("inlineCode",{parentName:"p"},"min")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"max")," as the range"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"Slider(def: number, min: number, max: number, step?: number)\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Arguments:"),(0,a.kt)("ul",{parentName:"blockquote"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"def"),":  Default control value"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"min"),":  Minimum value"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"max"),":  Maximum value"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"step"),":  Step to increment/decrement the number, if not given the slider will be continuous"))),(0,a.kt)("h2",{id:"rgba-control"},"RGBA Control"),(0,a.kt)("p",null,"This control is similar to the Color primitive, but this one allows you to modify the transparency value of the color, it gets displayed as a color picker with a slider for the alpha value, this gets converted to transparency when used in your story"),(0,a.kt)("p",null,"The control value will be ",(0,a.kt)("inlineCode",{parentName:"p"},"{Color: Color3, Transparency: number}")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"RGBA(defColor: Color3, transparency: number)\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Arguments:"),(0,a.kt)("ul",{parentName:"blockquote"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"defColor"),":  Default color value"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"transparency"),":  Default transparency value"))),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"Let's use all of them in a more real context."),(0,a.kt)(o.Z,{mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"lua",label:"Luau",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'--HelloText.story.lua\nlocal Roact = require(ReplicatedStorage.Roact)\n\nlocal controls = {\n   Theme = Choose({"Dark", "Light"}, 0),\n   Currency = Choose({"Coins", "Gems"}, 0),\n   ["Window Size"] = EnumList({\n      Mobile = 500,\n      Tablet = 1000,\n      Desktop = 1500,\n   }, "Mobile"),\n   ["Text Color"] = EnumList({\n      Red = Color3.new(1, 0, 0),\n      Green = Color3.new(0, 1, 0),\n      Blue = Color3.new(0, 0, 1),\n   }, "Red"),\n   Rating = Slider(3, 1, 5, 0.5), -- step is 0.5 so it can have half-stars\n   Volume = Slider(50, 0, 100, 1), -- step is 1 so it only has integer values\n   ["Frame Color"] = RGBA(Color3.new(1, 1, 1), 0) -- you will need to set BackgroundTransparency too\n}\n\nreturn {\n   summary = "This is a test story with <b>Rich text</b>.",\n   roact = Roact,\n   controls = controls,\n   story = function(props)\n      return Roact.createElement("TextLabel", {\n         Text = "Hello UI-LABS!",\n         TextColor3 = Color3.new(1, 1, 1),\n         BackgroundColor3 = Color3.new(0.3, 0.3, 0.3),\n         TextSize = 20,\n         Size = UDim2.fromOffset(300, 50),\n      })\n   end,\n}\n'))),(0,a.kt)(l.Z,{value:"ts",label:"Roblox-TS",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'//HelloText.story.ts\nimport Roact from "@rbxts/roact";\nimport { Choose, EnumList, Slider, RGBA } from "@rbxts/ui-labs/out/ControlsUtil" //import the constructor functions\n//we will see how to typecheck the story for controls later\n\nconst controls = {\n   Theme: Choose(["Dark", "Light"], 0),\n   Currency: Choose(["Coins", "Gems"], 0),\n   ["Window Size"]: EnumList({\n      Mobile: 500,\n      Tablet: 1000,\n      Desktop: 1500,\n   }, "Mobile"),\n   ["Text Color"]: EnumList({\n      Red: new Color3(1, 0, 0),\n      Green: new Color3(0, 1, 0),\n      Blue: new Color3(0, 0, 1),\n   }, "Red"),\n   Rating: Slider(3, 1, 5, 0.5), // step is 0.5 so it can have half-stars\n   Volume: Slider(50, 0, 100, 1), // step is 1 so it only has integer values\n   ["Frame Color"]: RGBA(new Color3(1, 1, 1), 0) // you will need to set BackgroundTransparency too\n}\n\nconst Story = {\n   summary: "This is a test story with <b>Rich text</b>.",\n   roact: Roact,\n   controls: controls,\n   story: (props) => {\n      return Roact.createElement("TextLabel", {\n         Text: "Hello UI-LABS!",\n         TextColor3: new Color3(1, 1, 1),\n         BackgroundColor3: new Color3(0.3, 0.3, 0.3),\n         TextSize: 20,\n         Size: UDim2.fromOffset(300, 50),\n      });\n   },\n};\nexport = Story;\n')))))}b.isMDXComponent=!0}}]);